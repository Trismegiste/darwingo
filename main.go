package main

import (
	"fmt"
	"log"
	"main/darwin"

	"github.com/gofiber/fiber/v2"
)

func defunc_main() {
	app := fiber.New()

	app.Get("/", func(c *fiber.Ctx) error {
		return c.SendString("Hello, World üëã!")
	})

	log.Fatal(app.Listen(":3000"))
}

func main() {
	poolSize := 3000
	maxRound := 10

	darwin.Initialise(poolSize)
	for k := range 10 {
		fmt.Println("=========== Epoch", k, "===========")
		darwin.RunEpoch(maxRound)
		darwin.Selection()
		darwin.Log(5)
	}

	// on compte les victoires ind√©pendamment du co√ªt
	// Puis on regroupe les npc par COST pour d√©terminer qui a la plus de victoire pour un COST donn√©.
	// Et ensuite on duplique/mute les gagnants de chaque COST. On peut en g√©n√©rer autant qu'il y a de NPC dans un COST donn√©
	// De cette fa√ßon, on ne change pas le profil de puissance globale

	// Il faut visualiser 2 courbes :
	// * le nombre de NPC par COST
	// * le nombre de victoires (total ? moyen ?) par COST

	// L'id√©e c'est obtenir non pas le meilleur NPC du pool complet mais le meilleur NPC pour un COST donn√©
	// Donc pour chaque COST donn√©, on vire (on remplace par des mutants), les NPC qui ont le moins de victoires dans ce COST donn√©

}
